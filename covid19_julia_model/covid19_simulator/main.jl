using JuliaWebAPI
using Revise
include("MMCAcovid19.jl")
using .MMCAcovid19
using Random
using Distributions
using Graphs
using HTTP
using Sockets
using JSON2
using JSON

function generate_simulation(json_params)

    #------ Geographic and population data ------#

    # Number of strata
    G = 3

    # Number of patches
    M = 42

    # Random population
    Random.seed!(666)

    total_population = 7758615

    nᵢᵍ = [11925.574797821519 38060.70560737966 29167.819438907587 5414.8913606358865 1044.4309596493704 32858.40691102729 2745.966517993224 47909.33214703913 51651.810232109725 20841.22929646593 36341.43193134342 220617.70642518025 29238.507161651916 603881.5089324577 10590.980002487557 5091.104525743319 5322.494299820264 40841.08936865665 5032.859960186192 15663.28741843744 52093.93943429336 121684.81110997258 3770.8061237733796 18107.970683685166 10369.915401395738 43439.061740529716 3486.7314926697613 1879.9757273688667 9734.520140772547 8703.85607843668 2446.007005374026 5788.450824277271 6737.572494833163 6198.2807673792295 56023.064877172015 46516.7575341733 3600.573143531416 69364.24736605695 3018.3922359854173 9868.747389579195 248180.62333496378 110079.31667469
           24940.66101681808 79598.60826062385 61000.388623485 11324.483067532028 2184.2803354722464 68718.73282538186 5742.802443477348 100195.62435176897 108022.49046640412 43586.49741158699 76002.98937632555 461390.87830495526 61148.22204542951 1.2629331721067484e6 22149.543863176612 10647.328479374219 11131.24762087048 85413.38952377455 10525.518169157769 32757.560833344614 108947.14145759263 254486.65378743503 7886.1102200586065 37870.27176306596 21687.21836758236 90846.68304265646 7292.008116139285 3931.7046038500434 20358.378619766547 18202.88981216364 5115.479345862632 12105.730102602076 14090.68447590195 12962.831739943278 117164.35424814868 97283.25057113932 7530.091904289619 145065.55948645476 6312.542485353379 20639.096016492636 519034.8391987488 230215.39579357917
           8178.764185360403 26102.6861319965 20003.79193760742 3713.6255718320863 716.2887048783837 22534.86026359086 1883.2310385294284 32857.0435011919 35423.69930148616 14293.273291947082 24923.578692331044 151303.41526986455 20052.27079291858 414152.31896079396 7263.476134335832 3491.566994882463 3650.2580793092584 28009.521107568813 3451.621870656039 10742.15174821795 35726.919108114016 83453.53510259242 2586.083656168015 12418.757553248874 7111.866231021903 29791.255216813828 2391.2603911909537 1289.3196687810905 6676.10123946091 5969.254109399681 1677.5136487633426 3969.8190731206537 4620.743029264889 4250.887492677495 38421.58087467931 31901.99189468739 2469.334952178965 47571.19314748831 2070.0652786612045 6768.156593928169 170206.5374662875 75494.28753173086
          ]

    # Strata contacts
    C = [0.5980 0.3849 0.0171
      0.2440 0.7210 0.0350
      0.1919 0.5705 0.2376]


    # Random mobility
    target_i = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]
    target_f = [1, 3, 9, 10, 12, 13, 14, 17, 19, 35, 36, 38, 41, 2, 11, 12, 14, 16, 20, 21, 22, 26, 30, 33, 34, 36, 41, 42, 1, 2, 3, 6, 8, 9, 10, 12, 13, 14, 17, 18, 23, 33, 38, 41, 42, 4, 8, 14, 16, 19, 23, 25, 26, 35, 37, 40, 41, 5, 6, 7, 10, 14, 25, 28, 35, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17, 18, 21, 22, 24, 26, 29, 34, 35, 38, 40, 41, 42, 7, 14, 35, 3, 4, 6, 8, 11, 12, 14, 15, 20, 21, 22, 23, 26, 34, 35, 36, 37, 38, 40, 41, 42, 1, 2, 3, 9, 10, 12, 13, 14, 17, 18, 21, 22, 24, 31, 32, 35, 38, 39, 41, 42, 8, 9, 10, 12, 14, 21, 24, 32, 35, 38, 39, 41, 42, 2, 7, 8, 11, 12, 14, 16, 20, 21, 22, 26, 30, 33, 35, 36, 38, 40, 41, 42, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 2, 3, 6, 8, 9, 12, 13, 14, 18, 22, 26, 30, 32, 35, 38, 41, 42, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 4, 6, 8, 12, 14, 15, 16, 17, 19, 22, 23, 26, 33, 37, 40, 41, 3, 4, 8, 10, 12, 14, 16, 21, 22, 33, 35, 41, 42, 1, 6, 9, 12, 13, 14, 17, 18, 19, 29, 34, 38, 40, 41, 1, 3, 6, 8, 9, 10, 12, 13, 14, 17, 18, 22, 23, 24, 25, 35, 36, 38, 41, 42, 1, 8, 9, 12, 14, 17, 19, 21, 22, 25, 27, 29, 34, 35, 40, 2, 8, 11, 12, 14, 20, 21, 22, 26, 30, 33, 35, 36, 41, 2, 3, 11, 12, 14, 15, 17, 20, 21, 22, 26, 30, 33, 35, 36, 38, 41, 42, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 16, 18, 20, 21, 22, 25, 26, 36, 38, 41, 42, 6, 8, 14, 22, 23, 26, 37, 41, 42, 7, 8, 9, 10, 12, 13, 14, 21, 24, 30, 32, 33, 35, 38, 41, 4, 6, 9, 12, 14, 25, 27, 29, 34, 35, 37, 40, 42, 2, 8, 11, 12, 14, 15, 16, 20, 21, 22, 23, 26, 30, 31, 33, 35, 36, 41, 42, 4, 7, 12, 14, 27, 28, 35, 41, 7, 14, 27, 28, 35, 6, 12, 14, 17, 19, 21, 25, 27, 29, 34, 35, 37, 38, 40, 41, 2, 11, 14, 20, 21, 29, 30, 36, 41, 42, 9, 14, 31, 32, 38, 1, 9, 10, 14, 17, 19, 31, 32, 35, 38, 39, 8, 12, 14, 20, 21, 26, 33, 41, 42, 1, 3, 6, 8, 9, 12, 14, 15, 17, 20, 25, 26, 29, 34, 35, 37, 40, 41, 42, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 25, 26, 27, 28, 29, 32, 34, 35, 37, 38, 40, 41, 42, 2, 8, 11, 12, 13, 14, 19, 20, 21, 22, 26, 30, 36, 38, 40, 41, 42, 8, 14, 15, 20, 23, 25, 34, 35, 37, 41, 1, 3, 6, 9, 10, 12, 13, 14, 17, 18, 19, 22, 24, 31, 32, 33, 35, 38, 39, 40, 41, 42, 1, 9, 10, 14, 32, 38, 39, 1, 4, 6, 8, 12, 13, 14, 15, 17, 19, 21, 25, 27, 29, 34, 35, 40, 41, 42, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 1, 2, 3, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 26, 33, 35, 36, 38, 41, 42]

    # network m number of patches
    network = DiGraph(M)

    for i in 1:length(target_i)
      add_edge!(network, target_i[i], target_f[i])   # add self-loops
    end
    L = ne(network)

    # list of edges
    L = ne(network)
    edgelist = zeros(Int64, L, 2)
    edgelist[:, 1] .= src.(edges(network))
    edgelist[:, 2] .= dst.(edges(network))


    # list of commuting probabilities

    Rᵢⱼ = [0.7525981056215199, 0.0032776243572209206, 0.05028419950639074, 0.0014358550877460535, 0.000958960582013479, 0.011460188479185634, 0.019888936014913663, 0.037420557998956584, 0.0024862414680819366, 0.0014362415894264922, 0.002961549201676406, 0.11478418663113973, 0.0010073534617285752, 0.9111715830987469, 0.010019197107560359, 0.005162922310791299, 0.015224587939429655, 0.0003166503282031041, 0.004186385362765631, 0.04095277773161401, 0.0018656088030653268, 0.001587485570264907, 0.0014352494227009907, 0.0002808617967724052, 0.0004026554418508127, 0.002340559960688547, 0.003902361653836479, 0.0011511134717096976, 0.0022253315330648307, 0.0012997212339129977, 0.7459313552059024, 0.008111712546782416, 0.0013507766171504754, 0.0006805092207154519, 0.0005685057226122307, 0.06568988667656543, 0.018166692486076073, 0.11804435426903574, 0.0006158209841018268, 0.01411465044301729, 0.0013582351754641677, 0.00031695392487907396, 0.002054896177998138, 0.015919075247455738, 0.0035515225352659155, 0.9023303441292253, 0.002265879036815598, 0.04520994831780874, 0.008284555206604757, 0.002002216940404993, 0.0030362796804800783, 0.002860489842804194, 0.001430954737346088, 0.009861699705368437, 0.015447711230285873, 0.0031659318459904794, 0.004103989326865537, 0.8136587090763168, 0.019653556649292626, 0.043557914545046546, 0.006056535419463541, 0.013414257325556511, 0.010817454464512087, 0.009826778324646313, 0.08301479419516565, 0.0010543269733042102, 0.032630522196183426, 0.7098581591607689, 0.012510449416119193, 0.0004783900492711602, 0.1094993590324895, 0.0006940084349424492, 0.09673636899598713, 0.0003971790097526047, 0.003881172482860973, 0.0002488711237467623, 0.0003398939846744389, 0.0003635593782969186, 0.00026814895075100614, 0.0014854800381754764, 0.00025469888659953465, 0.004511787650415019, 0.0008061302337007641, 0.0014682577732077558, 0.0027705616622802263, 0.01711827885912663, 0.0026243957073458506, 0.9109965814424816, 0.0740068051327683, 0.0149966134247501, 0.0005911826964155193, 0.0003481071633955173, 0.0062032780280702905, 0.8406287212612944, 0.00027278527152466836, 0.020548018217681263, 0.05657132885704337, 0.008431728494198201, 0.0007619533376427015, 0.000763278067225297, 0.0006424226635680731, 0.0024602442484825317, 0.008882160715460363, 0.0015330500428492782, 0.0002930889555994922, 0.0004148862107940083, 0.0037719678118217134, 0.000266313285889462, 0.00019886857786179465, 0.04167657157151837, 0.004740044521663794, 0.019546234654867097, 0.0013640193215937917, 0.0007972637195050104, 0.7065862702304511, 0.004769104582700891, 0.002750868001108832, 0.004295872554887531, 0.017694750923860667, 0.0033485495728620717, 0.0010484365613333381, 0.00022393237646275974, 0.00152556900580826, 0.0013500110857208557, 0.003291902726451268, 0.0037019529761995362, 0.0012897868414375238, 0.22373074964711445, 0.00037381353048616066, 0.0018084135930010368, 0.0005024980941477389, 0.0004408559053865382, 0.013009891335499223, 0.8663163659346356, 0.0036019415899964232, 0.013290147905107073, 0.0011854252837603728, 0.051957312361442326, 0.01111745380350703, 0.001595790148193472, 0.027482957518207413, 0.0062921784180474845, 0.0028209231817995896, 0.0008887566144174807, 0.015218803285794441, 0.00045602157199087527, 0.00037374868506899586, 0.830343134923664, 0.001406875675872721, 0.024637182284408872, 0.000625803578097223, 0.0008545561086558787, 0.09141038355254553, 0.0038428423373410873, 0.0019570210054493204, 0.000904017070946707, 0.0018103450808843898, 0.00043696445465604217, 0.018906438161923146, 0.0005885355789081711, 0.0003047329292452579, 0.0034752255124368132, 0.002447368202110517, 4.091933011024809e-05, 0.00037479506165892214, 0.0040894947164446145, 7.909472023208056e-05, 0.004107156236851372, 0.00189727197091861, 0.0002010836736610195, 4.2179279984646365e-05, 0.6297228660291107, 0.0009001088451852591, 0.2960870368279663, 0.0001730753383741826, 4.9200527730429794e-05, 0.002862285052908296, 0.00013618901750188877, 0.000514728093738475, 0.002213752061812628, 0.00029462667573873996, 4.574694371361034e-05, 4.944201742479478e-05, 8.239184432883755e-05, 0.00019257749092907187, 0.0003824175238224935, 0.0002905405662846554, 3.4220356320110164e-05, 0.0008447757132886541, 6.0779304736716915e-05, 4.316160303859611e-05, 0.04509718419717346, 0.00909089897901039, 0.01189940027378614, 0.00121805475008751, 0.05934598729840718, 0.004330937413806287, 0.002578810257624489, 0.007127013581844523, 0.060050196951685605, 0.6211355144155108, 0.1280067777597235, 0.03869659693544447, 0.0012969362678502295, 0.0016437110567267983, 0.0006553391887735313, 0.0018108233672302957, 0.0004077243145047548, 0.04596045883588633, 0.012184409491885217, 0.001651307839222269, 0.00010423163204986966, 0.000407247678153655, 0.0014133703585389847, 0.0001048277817466468, 0.0007999268248356718, 0.000974602930554519, 0.00012600253154542896, 0.0001640443657905583, 0.00012603859561946223, 0.06978613894994833, 0.0005313935557968272, 0.8404305295896005, 0.00018260512596766855, 6.228246918276497e-05, 8.351662645492119e-05, 0.0014713317100933801, 6.324977213528608e-05, 8.799564131567225e-05, 0.0010521601397817375, 0.010111556675994803, 2.7862966858772778e-05, 3.124977262958135e-05, 5.458412039621505e-05, 0.001139789867773858, 1.2651736154063326e-05, 3.234130396718766e-05, 0.00013540719945204365, 4.669007567098937e-05, 1.64301739095139e-05, 2.4556362230480975e-05, 2.623441386901568e-05, 0.00014496084321644477, 0.00022687892874282274, 0.0006139717731016215, 4.5071810003404535e-05, 0.0007339766774133698, 6.600849527072456e-05, 3.531419837831087e-05, 0.05100392166094196, 0.017499044664912904, 0.0011345651018665652, 0.001878506632032318, 0.09842300267700607, 0.0048483602375766904, 0.05064733157615322, 0.8052463793039688, 0.008470468014310445, 0.00171309997908639, 0.0016588896154444048, 0.0020563638533729147, 0.0009517318907084177, 0.002707046733807992, 0.0016395029907244646, 0.004287088735515438, 0.0011228870039884467, 0.013214775654437535, 0.0019899795840713345, 0.012658670559937059, 0.003404801326248787, 0.0016859877206582418, 0.006571340017633909, 0.05041776656893087, 0.9044403104776818, 0.003455220093050298, 0.001796262980996083, 0.0015922090229190079, 0.0020040273601539156, 0.004121695274355604, 0.005861729013363161, 0.049882241809597994, 0.01223342435698053, 0.01966054618190383, 0.004219793876390763, 0.0053292604499448806, 0.02541780858795701, 0.841585124048016, 0.0021513433344448893, 0.004186332038791142, 0.003021732859049438, 0.0015660953628145137, 0.026251910884885505, 0.0015358523326600702, 0.002958533876563635, 0.0010708581305684387, 0.046083410741966396, 0.0007403194273641095, 0.0009138511744391536, 0.002157348428542469, 0.0002682297706436116, 0.08525663155635606, 0.026926711249367824, 0.2014267877478575, 0.00037615715789419767, 0.6010057015077714, 0.0018143296546607685, 0.0004537840551841722, 0.00039257362581235556, 0.00041625541356362674, 0.0002555847467664661, 0.0004074391184721993, 0.008744265529213114, 0.016616300147851402, 0.004673460815704847, 0.0015376673975668568, 0.0017422829450141999, 0.004953569234368319, 0.002171368682504259, 0.009595590386120331, 0.011169892164402364, 0.7622841293433705, 0.0044212067489947035, 0.002652016500846391, 0.004297062174029379, 0.0015437905566040647, 0.06048548179402506, 0.0027178938255275707, 0.1273750260164974, 0.0030530222301287844, 0.012930232192045574, 0.0008097479164449675, 0.002410023133225385, 0.0007074729101069913, 0.006201615383432377, 0.8939056469231244, 0.04824728057499301, 0.0011072692665203576, 0.0020501515956166264, 0.013955784702898601, 0.007050628543405026, 0.0011074127146501478, 0.008348659916254754, 0.0011680742272817644, 0.015097498376465086, 0.00017210552437351746, 0.020737196665355187, 0.002233907889336079, 0.019105139051137258, 0.0003261919148366856, 0.00015797476725681235, 0.006006428694472572, 0.834332910989013, 0.0020423077641606, 0.0019450304560221167, 0.020525044790002868, 0.0010504071423915588, 0.0002501804107307815, 0.07108005874357251, 0.0001766579713423522, 0.0026124847565164606, 0.0021484740930145666, 7.141847137039486e-05, 0.0005763289937906883, 0.000778675695431347, 8.745877351575357e-05, 0.0005565323730942993, 0.0005597192386207859, 0.0001799144380760772, 0.0009313259427754345, 0.02047364937051301, 6.85527912458827e-05, 0.24481177456801267, 0.00020822810411084942, 0.00014320695151894545, 8.880466120620097e-05, 0.004186719684090579, 0.6366664705903797, 7.170929924458129e-05, 0.001037739296530866, 0.02271873639033266, 0.0004752651792774785, 0.025256829747450804, 0.04005093943941092, 0.0057024602322337465, 0.1392138774356717, 0.09522234906459916, 0.002273335812428233, 0.6525994581721725, 0.022356183095351277, 0.0031896221173732895, 0.02480438361736838, 0.054638330452801774, 0.002394797879396451, 0.0037561869992607196, 0.0022670562048324673, 0.11835166489624033, 0.0015319931701295686, 0.0011632220793837858, 0.010927012094401778, 0.0008694873761155381, 0.8428012114672214, 0.0006818418420015285, 0.0005200575353251245, 0.0012727842964193193, 0.0006270325275743623, 0.010939570260507346, 0.001896081371190144, 0.008094125342105575, 0.005291564913219249, 0.001144079150337197, 0.003222646703259273, 0.01449530745346603, 0.7998277956119969, 0.001079209858501651, 0.005781237063501405, 0.014861043049086671, 0.11109498306535788, 0.0015542775062197846, 0.031644448571898756, 0.0019092817110496845, 0.0005482823534429843, 0.005321043697253685, 0.00021254331214571177, 0.00282654153485347, 0.05216515546189811, 0.0010743155959364494, 0.0010492029118048538, 0.0017978503173669018, 0.003025743240332812, 0.0015151633105244032, 0.0020348098504389097, 0.8832039572737731, 0.00045790926861586723, 0.00023745457047063732, 0.0042139393211115565, 0.0004298427197561367, 0.002789577416225458, 0.008620590941358768, 0.028476076902690065, 0.007807569693989643, 0.006143644903794934, 0.005758087280805388, 0.03072831556826604, 0.8625967852761721, 0.029247539947736646, 0.0550585548838755, 0.0026595024453596886, 0.013306727301982863, 0.03400466125694994, 0.031172161227501043, 0.910788216556368, 0.010728233657197998, 0.0017933933167093078, 0.006690173435829003, 0.015276677877104248, 0.0012975944275463466, 0.02700473539253762, 0.0010752143076654048, 0.0135186496959538, 0.0008423737078439522, 0.7473161517417171, 0.0033105172361671538, 0.1244370846151855, 0.0012361653481149809, 0.0037105529690637353, 0.05173454195847977, 0.0007561739700821077, 0.01573464244053792, 0.0014489603826305772, 0.011551591525315524, 0.060586367440862585, 0.1706153052776279, 0.0013745296147466908, 0.720371426566993, 0.014974171603267115, 0.0025051298032591346, 0.0008378753447596716, 0.04568894446478662, 0.005706643592244559, 0.8488594587177364, 0.038841641362028785, 0.060903311863203656, 0.0013843902058752406, 0.022150261694191, 0.025847896505042687, 0.00708424375408553, 0.005148743598749735, 0.007972145238000073, 0.013529009700826424, 0.8707734615411484, 0.006472610474880315, 0.03140213546960879, 0.008235101817591815, 0.001248929717562698, 0.005495117924491943, 0.0323312423410359, 0.013863836917107533, 0.020436298062517243, 0.05295034814163469, 0.8648498932108521, 0.004399916636751763, 0.004424417048046029, 0.0014955123248044, 0.004564725220103175, 0.041545235808843686, 0.006094929251168978, 0.001175567837400695, 0.0015281340860918357, 0.027139600892736333, 0.0013030989559294215, 0.0015876148613125991, 0.0018677245299602648, 0.001460712752695347, 0.0016889094058417408, 0.003193200250179148, 0.8277756031733058, 0.034634790266016624, 0.0013167431464702576, 0.03518793615421992, 0.002911720952020836, 0.003528240130898946, 0.0007304929883251496, 0.0001784634338674082, 0.00034191136496397996, 0.00014306055035818402, 0.003331798566854347, 0.001147008965739019, 0.0013695379991972, 0.0017362363403589309, 0.00023161568806657527, 0.003976124844566759, 0.00046033641217834705, 0.01274899728563794, 0.00027823963444395164, 0.002067481954482701, 0.0004879933917064522, 0.008532282943154178, 0.0003559344159396535, 0.012454578801047961, 0.0001648714906665027, 0.0009389111284942436, 0.00047152011003495783, 0.016352712472449803, 0.002687805012823832, 0.0022820514438786875, 0.9200066488792541, 0.0003143556894373575, 0.0024235604476064024, 0.0032245708232885423, 0.0003262686232678787, 0.00023462829790914805, 0.001926064588228066, 0.000180067116084471, 0.004760735215405172, 0.0062309842676536685, 0.00030026341859804066, 0.04607539316475595, 0.0005092580190004062, 0.0025909322746144416, 0.10422719893125375, 0.05449914667375437, 0.004837041261326075, 0.0036489559679501317, 0.7315861121587426, 0.0008805841628128478, 0.0007933805128180969, 0.015155714712769972, 0.021798167554231963, 0.048175698415652134, 0.015909040675393057, 0.0022187808480453905, 0.0032419974027538085, 0.003539452748292739, 0.0022353679490692236, 0.002434139687880533, 0.0060340609557581245, 0.907457804717353, 0.008753656599801922, 0.029008004975644222, 0.0019244412080343526, 0.0009257619620017343, 0.08105584225324458, 0.002459299851529981, 0.00641802807815785, 0.016647719961100715, 0.032186435469360904, 0.006044703702400835, 0.0017035530358186096, 0.0002054076333073633, 0.0003001947404929037, 0.00013888202190739116, 0.0003046890982207823, 0.0020721300741206408, 0.00015908608930278556, 0.0006722659198900268, 0.8091299114989031, 0.00020460787756250185, 0.0002992661197810855, 0.006401082550857353, 0.0017386858783600028, 0.004277689778250006, 0.014447852447474511, 0.007501564248163454, 0.007952475553729356, 0.08646351914006523, 0.021966989216348945, 0.8573899096159685, 0.0008046183399472337, 0.0013437936764109854, 0.009946161898592295, 0.0011442246024809322, 0.0009568291199626433, 0.0022986965141663725, 0.01891478372038787, 0.0009070871610946506, 0.006360222585354935, 0.0016744439258679163, 0.0011442246024809322, 0.02275289426766768, 0.0009426075613273043, 0.026609400315607108, 0.050789351588716926, 0.050437515721335424, 0.7964919678183671, 0.0008903431772511988, 0.005590833402980513, 9.475328830669299e-05, 0.00010877351720893147, 0.0024471399120326886, 4.102992593505014e-05, 0.0008077870442352817, 0.00012566016540843547, 0.005071538599896153, 6.828857854560805e-05, 0.00018532519031365347, 4.674403605097437e-05, 0.0400757394544749, 0.0003630358314306101, 0.19155260317866207, 0.00035179101431897966, 3.592721969862243e-05, 0.00027278616807705, 8.07587736631206e-05, 4.6223567853812476e-05, 0.0007472285136143266, 0.0038899618038867978, 8.487306450366666e-05, 0.001120275488040426, 5.210604072061903e-05, 3.923280492430038e-05, 0.0001915618681306993, 0.00012733753317291507, 5.2932080058818056e-05, 3.567238471398761e-05, 4.04919291898281e-05, 0.00015147168039710736, 0.0005944606734030246, 6.12885739789393e-05, 0.00021987239736254732, 4.4371812789035694e-05, 0.7178317074214948, 0.03293924846350564, 0.00010452149463671743, 0.00034308839041413577, 0.0006044753992314965, 0.0006674950201304634, 0.0008410767420646653, 0.0002851837372702621, 0.014606642404429526, 0.00010736066973876197, 0.1601945928589608, 9.69273086837759e-05, 6.873522608070393e-05, 0.00019662865817560664, 0.0001308575948963031, 0.0003308016197643711, 0.002525081933073751, 0.01263476425106202, 0.00123071743176231, 0.006034446365424991, 0.00015780508932396268, 9.979706273482571e-05, 0.0056999882020374905, 0.00022417497312124997, 0.10023785157889839, 0.6925769859880834]

    sum_r = zeros(M)
    for e in 1:L   # find output strengths
      i = edgelist[e, 1]
      sum_r[i] += Rᵢⱼ[e]
    end
    for e in 1:L   # normalize weights
      i = edgelist[e, 1]
      Rᵢⱼ[e] /= sum_r[i]
    end


    # Average number of contacts per strata
    kᵍ = [11.8, 13.3, 6.6]

    # Average number of contacts at home per strata
    kᵍ_h = [3.15, 3.17, 3.28]

    # Average number of contacts at work per strata
    kᵍ_w = [1.72, 5.18, 0.0]

    # Degree of mobility per strata
    pᵍ = [0.0, 1.0, 0.05]

    # Patch surfaces (in km²)
    sᵢ = [538.0, 1358.0, 593.0, 1447.0, 427.0, 866.0, 634.0, 1092.0, 697.0, 1003.0, 702.0, 486.0, 296.0, 146.0, 1185.0, 547.0, 650.0, 185.0, 798.0, 735.0, 576.0, 399.0, 338.0, 735.0, 1784.0, 1245.0, 1343.0, 1378.0, 305.0, 263.0, 499.0, 827.0, 957.0, 723.0, 1397.0, 995.0, 1001.0, 319.0, 743.0, 580.0, 583.0, 735.0]

    # Density factor
    ξ = 0.01

    # Average household size
    σ = 2.5



    # Collect all population data
    population = Population_Params(G, M, nᵢᵍ, kᵍ, kᵍ_h, kᵍ_w, C, pᵍ, edgelist, Rᵢⱼ, sᵢ, ξ, σ)



    #------ Epidemic parameters ------#

    # Infectivity of infected
    βᴵ = 0.075

    # Infectivity of asymptomatic
    βᴬ = 0.5 * βᴵ

    # Exposed rate
    ηᵍ = [1 / 2.444, 1 / 2.444, 1 / 2.444]

    # Asymptomatic infectious rate
    αᵍ = [1 / 5.671, 1 / 2.756, 1 / 2.756]

    # Infectious rate
    μᵍ = [1 / 1.0, 1 / 3.915, 1 / 3.915]

    # Direct death probability
    θᵍ = [0.0, 0.008, 0.047]

    # ICU probability
    γᵍ = [0.0003, 0.003, 0.026]

    # Pre-deceased rate
    ζᵍ = [1 / 7.084, 1 / 7.084, 1 / 7.084]

    # Pre-hospitalized in ICU rate
    λᵍ = [1 / 4.084, 1 / 4.084, 1 / 4.084]

    # Fatality probability in ICU
    ωᵍ = [0.3, 0.3, 0.3]

    # Death rate in iCU
    ψᵍ = [1 / 7.0, 1 / 7.0, 1 / 7.0]

    # ICU discharge rate
    χᵍ = [1 / 20.0, 1 / 20.0, 1 / 20.0]


    # Number of timesteps
    T = parse(Int64, json_params["timesteps"])
    # Epidemic parameters
    epi_params = Epidemic_Params(βᴵ, βᴬ, ηᵍ, αᵍ, μᵍ, θᵍ, γᵍ, ζᵍ, λᵍ, ωᵍ, ψᵍ, χᵍ, G, M, T)




    #------ Initialization of the epidemics ------#

    # Initial number of exposed individuals
    E₀ = zeros(G, M)

    # Initial number of infectious asymptomatic individuals
    A₀ = zeros(G, M)
    A₀[1, 5] = 2.0
    A₀[1, 3] = 1.0

    # Initial number of infectious symptomatic individuals <------------------------------------------------- PATIENT ZERO
    I₀ = zeros(G, M)
    I₀[1, parse(Int64, json_params["patient_zero"])] = 1.0

    # show initial exposed
    #println("Initial number of exposed E₀:")
    #for g in 1:G
     # print(string("  ", g, ":"))
      #for i in 1:M
       # printf("%5.1f", E₀[g, i])
      #end
      println()
    #end

    # show initial asymptomatic
    #println("Initial number of infectious asymptomatic A₀:")
    #for g in 1:G
     # print(string("  ", g, ":"))
      #for i in 1:M
       # printf("%5.1f", A₀[g, i])
      #end
      #println()
    #end

    # show initial symptomatic
    #println("Initial number of infectious symptomatic I₀:")
    #for g in 1:G
      #print(string("  ", g, ":"))
      #for i in 1:M
       # printf("%5.1f", I₀[g, i])
      #end
      #println()
    #end


    # Apply initialization
    set_initial_infected!(epi_params, population, E₀, A₀, I₀)



    #------ Containment strategy ------# #-----------------------WEB SITE

    # Single containment parameters

    # Timestep of application of containment
    tᶜ = 30

    # Mobility reduction
    κ₀ = 0.65

    # Permeability of confined households
    ϕ = 0.174

    # Social distancing
    δ = 0.207


    # Multiple containments parameters

    # List of timesteps of application of containments
    tᶜs = [30, 60, 90, 120]

    # List of mobility reductions
    κ₀s = [0.65, 0.75, 0.65, 0.55]

    # List of permeabilities of confined households
    ϕs = [0.174, 0.174, 0.174, 0.174]

    # List of social distancings
    δs = [0.207, 0.207, 0.207, 0.207]



     # List of timesteps of application of containments
    tᶜs = Int[]

    # List of mobility reductions
    κ₀s = Float64[]

    # List of permeabilities of confined households
    ϕs = Float64[]

    # List of social distancings
    δs = Float64[]

    for lockdown in Dict(JSON.parse(json_params["lockdown_info"]))
        # lockdown timesteps
        tᶜs = append!(tᶜs, [timestep for timestep in lockdown.second["init"]:lockdown.second["final"]])
        # severity
        κ₀s = append!(κ₀s, [convert(AbstractFloat, lockdown.second["severity"]) for x in lockdown.second["init"]:lockdown.second["final"]])
        # lockdown_permeability
        ϕs = append!(ϕs, [convert(AbstractFloat, lockdown.second["lockdown_permeability"]) for x in lockdown.second["init"]:lockdown.second["final"]])
        # lockdown_distance
        δs = append!(δs, [convert(AbstractFloat, lockdown.second["lockdown_distance"]) for x in lockdown.second["init"]:lockdown.second["final"]])
    end

    if length(Dict(JSON.parse(json_params["lockdown_info"]))) == 0
        tᶜs = [-1]
        κ₀s = [0.0]
        ϕs = [1.0]
        δs = [0.0]
    end

    # No containment as particular case of multiple containments # <----------------------------------------------
    #tᶜs = [-1]
    #κ₀s = [0.0]
    #ϕs = [1.0]
    #δs = [0.0]

    # Single containment as particular case of multiple containments
    #tᶜs = [30]
    #κ₀s = [0.65]
    #ϕs = [0.174]
    #δs = [0.207]

    # Multiple containments
    #tᶜs = [30, 60, 90, 120]
    #κ₀s = [0.65, 0.75, 0.65, 0.55]
    #ϕs = [0.174, 0.174, 0.174, 0.174]
    #δs = [0.207, 0.207, 0.207, 0.207]



    #------ Running the model ------#

    # Run the model with multiple containment strategies
    population = Population_Params(G, M, nᵢᵍ, kᵍ, kᵍ_h, kᵍ_w, C, pᵍ, edgelist, Rᵢⱼ, sᵢ, ξ, σ)
    epi_params = Epidemic_Params(βᴵ, βᴬ, ηᵍ, αᵍ, μᵍ, θᵍ, γᵍ, ζᵍ, λᵍ, ωᵍ, ψᵍ, χᵍ, G, M, T)
    set_initial_infected!(epi_params, population, E₀, A₀, I₀)

    run_epidemic_spreading_mmca!(epi_params, population, tᶜs, κ₀s, ϕs, δs; verbose=false)




    #------ Saving results ------#

    # Output path and suffix for results files
    #output_path = "./results/no_containment"
    #output_path = "./results/single_containment"
    output_path = "covid19_rest_api/covid19_simulator/results/json_database"
    suffix = "run01"

    mkpath(output_path)


    # Store compartments
    # store_compartment(epi_params, population, "S", suffix, output_path)
    # store_compartment(epi_params, population, "E", suffix, output_path)
    # store_compartment(epi_params, population, "A", suffix, output_path)
    # store_compartment(epi_params, population, "I", suffix, output_path)
    # store_compartment(epi_params, population, "PH", suffix, output_path)
    # store_compartment(epi_params, population, "PD", suffix, output_path)
    # store_compartment(epi_params, population, "HR", suffix, output_path)
    # store_compartment(epi_params, population, "HD", suffix, output_path)
    # store_compartment(epi_params, population, "R", suffix, output_path)
    # store_compartment(epi_params, population, "D", suffix, output_path)


    # Optional kernel length
    τ = 21

    # Calculate effective reproduction number R
    Rᵢᵍ_eff, R_eff = compute_R_eff(epi_params, population, τ)

    # Calculate and store effective reproduction number R
    # store_R_eff(epi_params, population, suffix, output_path, τ)


    # Save all to json
    @eval using Dates
    start_date = Date("2020-03-01")
    indent = 0
    indent = 2
    json_return = save_json(output_path, suffix, start_date, epi_params, population,
      E₀, A₀, I₀, tᶜs, κ₀s, ϕs, δs, τ, Rᵢᵍ_eff, R_eff, indent)




    #------ Analysis and plots ------#

    # g = 2
    # m = 4

    # plot()
    # plot!(epi_params.ρˢᵍ[g, m, :], lab="S")
    # plot!(epi_params.ρᴱᵍ[g, m, :], lab="E")
    # plot!(epi_params.ρᴬᵍ[g, m, :], lab="A")
    # plot!(epi_params.ρᴵᵍ[g, m, :], lab="I")
    # plot!(epi_params.ρᴿᵍ[g, m, :], lab="R")
    # plot!(epi_params.ρᴰᵍ[g, m, :], lab="D")
    # plot!(epi_params.ρᴴᴿᵍ[g, m, :], lab="H_R")
    # plot!(epi_params.ρᴴᴰᵍ[g, m, :], lab="H_D")
    # plot!(epi_params.ρᴾᴰᵍ[g, m, :], lab="P_D")
    # plot!(epi_params.ρᴾᴴᵍ[g, m, :], lab="P_H")

    # plot!(R_eff.R_eff, lab="R_eff")

    return json_return
end


# "service" functions to actually do the work
function simulation_post(req::HTTP.Request)
    params = JSON.parse(IOBuffer(HTTP.payload(req)))
    simulation = generate_simulation(params)
    return HTTP.Response(200, JSON2.write(JSON.json(simulation)))
end


# define REST endpoints to dispatch to "service" functions
const SIMULATION_ROUTER = HTTP.Router()
HTTP.@register(SIMULATION_ROUTER, "POST", "/simulation", simulation_post)

HTTP.serve(SIMULATION_ROUTER, Sockets.localhost, <PORT>)

